#version 330 core

in vec2 TexCoords;

uniform sampler2D screenTexture;

const float offset = 1.0/300.0;

vec2 offsets[9] = {
    vec2(-offset,  offset), // top-left
    vec2( 0.0f,    offset), // top-center
    vec2( offset,  offset), // top-right
    vec2(-offset,  0.0f),   // center-left
    vec2( 0.0f,    0.0f),   // center-center
    vec2( offset,  0.0f),   // center-right
    vec2(-offset, -offset), // bottom-left
    vec2( 0.0f,   -offset), // bottom-center
    vec2( offset, -offset)  // bottom-right
};

float kernel[9] = {
     -1, -1, -1,
     -1,  9, -1,
     -1, -1, -1
 };

float kernel_blur[9] = {
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16
};

float kernel_edge_detection[9] = {
    1, 1, 1,
    1, -8, 1,
    1, 1, 1
};

void main(){
    vec3 color = vec3(texture(screenTexture,TexCoords).rgb);
    //vec3 color = vec3(1.0);

    //post-processing
    //1.inversion
    //color = 1.0 - color;

    //2.grayscale
    //color = vec3(color.r); //single channel
    //color = vec3(color.r+color.g+color.b)*0.333;
    //color = vec3(0.2126*color.r+0.7152*color.g+0.0722*color.b);

    //3. Kernel
 // vec3 sampleTex[9];
 // for(int i = 0; i < 9; i++)
 //  {
 //      sampleTex[i] = vec3(texture(screenTexture, TexCoords.st + offsets[i]));
 //  }
 //  vec3 col = vec3(0.0);
 //  for(int i = 0; i < 9; i++){
 //      //col += sampleTex[i] * kernel[i];
 //      //col += sampleTex[i] * kernel_blur[i];
 //      //col += sampleTex[i] * kernel_edge_detection[i];
 //  }

    gl_FragColor = vec4(color,1.0);
}
