#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform vec3 viewPos;

struct Material{
    //sampler2D ambient;
    sampler2D diffuse;
    sampler2D specular;
    sampler2D emission;
    float shininess;
};
uniform Material material;

struct LightProperty{
    vec3 lightPos;
    vec3 ambientLight;
    vec3 diffuseLight;
    vec3 specularLight;
};
uniform LightProperty lightProperty;

void main(){
    vec3 color = vec3(1.0);
    vec3 norm = normalize(Normal);
    //ambient
    vec3 ambient = lightProperty.ambientLight*texture(material.diffuse,TexCoords).rgb;
    //diffuse
    vec3 lightDir = normalize(FragPos - lightProperty.lightPos);
    float diff = max(dot(Normal,-lightDir),0.0);
    vec3 diffuse = lightProperty.diffuseLight*texture(material.diffuse,TexCoords).rgb*diff;
    //specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflec = reflect(lightDir,Normal);
    float spec = pow(max(dot(reflec,viewDir),0.0),material.shininess);
    vec3 specular = lightProperty.specularLight*spec*(vec3(1.0)-texture(material.specular,TexCoords).rgb);

    //emission
    vec3 emission = texture(material.emission,TexCoords).rgb;

    color = ambient+diffuse+specular+emission;
    gl_FragColor = vec4(color,1.0);
}


